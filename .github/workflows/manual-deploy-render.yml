name: Manual Deploy to Render

on:
  # 자동 트리거 비활성화
  # push:
  #   branches: [ main, develop ]
  # pull_request:
  #   branches: [ main, develop ]
  
  # 수동 트리거만 활성화
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy to environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      force_rebuild:
        description: 'Force rebuild'
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check project structure
      run: |
        echo "📁 프로젝트 구조 확인"
        echo "======================"
        echo "현재 디렉토리: $(pwd)"
        echo ""
        echo "📂 루트 디렉토리 내용:"
        ls -la
        echo ""
        echo "📂 hearth_chat_django 디렉토리 내용:"
        ls -la hearth_chat_django/
        echo ""
        echo "📂 hearth_chat_react 디렉토리 내용:"
        ls -la hearth_chat_react/
        echo ""
        echo "📄 requirements.txt 파일 확인:"
        if [ -f "requirements.txt" ]; then
          echo "✅ 루트에 requirements.txt 존재"
          echo "파일 크기: $(wc -l < requirements.txt) 줄"
        else
          echo "❌ 루트에 requirements.txt 없음"
        fi
        echo ""
        echo "📄 Django requirements.txt 파일 확인:"
        if [ -f "hearth_chat_django/requirements.txt" ]; then
          echo "✅ Django 폴더에 requirements.txt 존재"
        else
          echo "❌ Django 폴더에 requirements.txt 없음"
        fi
        echo ""
        echo "📄 React package.json 파일 확인:"
        if [ -f "hearth_chat_react/package.json" ]; then
          echo "✅ React 폴더에 package.json 존재"
        else
          echo "❌ React 폴더에 package.json 없음"
        fi
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: hearth_chat_react/package-lock.json
        
    - name: Install Python dependencies
      run: |
        echo "🐍 Python 의존성 설치 시작"
        echo "=========================="
        
        # 루트 디렉토리에서 requirements.txt 사용
        if [ -f "requirements.txt" ]; then
          echo "✅ 루트 requirements.txt 사용"
          pip install -r requirements.txt
        elif [ -f "hearth_chat_django/requirements.txt" ]; then
          echo "✅ Django 폴더 requirements.txt 사용"
          pip install -r hearth_chat_django/requirements.txt
        else
          echo "❌ requirements.txt 파일을 찾을 수 없음"
          echo "사용 가능한 requirements 파일들:"
          find . -name "requirements*.txt" -type f
          exit 1
        fi
        
        echo "✅ Python 의존성 설치 완료"
        
    - name: Install Node.js dependencies
      run: |
        echo "📦 Node.js 의존성 설치 시작"
        echo "============================"
        
        if [ -f "hearth_chat_react/package.json" ]; then
          cd hearth_chat_react
          npm ci
          cd ..
          echo "✅ Node.js 의존성 설치 완료"
        else
          echo "❌ package.json 파일을 찾을 수 없음"
          exit 1
        fi
        
    - name: Build React app
      run: |
        echo "🔨 React 앱 빌드 시작"
        echo "======================"
        
        if [ -f "hearth_chat_react/package.json" ]; then
          cd hearth_chat_react
          
          # CI 빌드 스크립트 사용
          if [ -f "build-ci.sh" ]; then
            echo "📜 CI 빌드 스크립트 사용"
            chmod +x build-ci.sh
            ./build-ci.sh
          else
            echo "📜 기본 빌드 사용 (CI=false)"
            CI=false npm run build
          fi
          
          cd ..
          echo "✅ React 빌드 완료"
        else
          echo "❌ package.json 파일을 찾을 수 없음"
          exit 1
        fi
        
    - name: Check Django setup
      run: |
        echo "🧪 Django 설정 확인"
        echo "===================="
        
        if [ -f "hearth_chat_django/manage.py" ]; then
          cd hearth_chat_django
          
          # Django 설정 확인 스크립트 실행
          if [ -f "check-django.py" ]; then
            echo "📜 Django 설정 확인 스크립트 실행"
            chmod +x check-django.py
            python check-django.py
          else
            echo "📜 기본 Django 설정 확인"
            # 간단한 Django 가져오기 테스트 (한 줄로 처리)
            python -c "import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hearth_chat.settings'); os.environ['DATABASE_URL'] = 'sqlite:///test.db'; os.environ['DEBUG'] = 'True'; os.environ['SECRET_KEY'] = 'test-secret-key'; import django; django.setup(); print('✅ Django 기본 설정 로드 성공')" || echo "⚠️ Django 설정 로드 실패하지만 배포는 계속 진행됩니다."
          fi
          
          cd ..
          echo "✅ Django 설정 확인 완료"
        else
          echo "❌ manage.py 파일을 찾을 수 없음"
          echo "⚠️ Django 설정 확인을 건너뜁니다."
        fi
        
    - name: Deploy to Render via API
      run: |
        echo "🚀 Render API를 통한 배포 시작!"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Force rebuild: ${{ github.event.inputs.force_rebuild }}"
        echo ""
        
        # Render Deploy Hook 호출
        if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
          echo "🔄 강제 재빌드 모드로 배포 중..."
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}" \
            -H "Content-Type: application/json" \
            -d '{"force": true}' \
            -w "\nHTTP Status: %{http_code}\n"
        else
          echo "📦 일반 배포 모드로 배포 중..."
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}" \
            -H "Content-Type: application/json" \
            -w "\nHTTP Status: %{http_code}\n"
        fi
        
        echo ""
        echo "✅ Render 배포 요청 완료!"
        echo "📊 배포 상태는 Render 대시보드에서 확인하세요:"
        echo "   https://dashboard.render.com"
        
    - name: Wait for deployment (optional)
      if: github.event.inputs.environment == 'production'
      run: |
        echo "⏳ 프로덕션 배포 완료 대기 중..."
        echo "일반적으로 2-5분 정도 소요됩니다."
        echo "Render 대시보드에서 실시간 진행 상황을 확인하세요."
        
    - name: Deployment Summary
      run: |
        echo ""
        echo "🎉 배포 프로세스 완료!"
        echo "=================================="
        echo "📋 배포 요약:"
        echo "   • 환경: ${{ github.event.inputs.environment }}"
        echo "   • 강제 재빌드: ${{ github.event.inputs.force_rebuild }}"
        echo "   • 커밋: ${{ github.sha }}"
        echo "   • 브랜치: ${{ github.ref_name }}"
        echo "   • 실행자: ${{ github.actor }}"
        echo ""
        echo "🔗 다음 링크에서 확인하세요:"
        echo "   • Render 대시보드: https://dashboard.render.com"
        echo "   • GitHub Actions: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo ""
        echo "💡 이 워크플로우는 수동 트리거로만 실행되어 렌더 무료 분량을 절약합니다." 