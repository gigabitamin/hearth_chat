"""
Django settings for hearth_chat project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import sys
from django.core.exceptions import ObjectDoesNotExist  # 추가

# dj_database_url을 안전하게 import
try:
    import dj_database_url
except ImportError:
    print("Warning: dj_database_url not found. Using default database configuration.")
    dj_database_url = None

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# MySQL 커스텀 백엔드를 위한 sys.path 추가
import sys
sys.path.append(os.path.join(BASE_DIR, 'chat'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", "your-default-secret-key")

# ==============================================================================
# ⚙️ 환경 설정 (로컬 / Railway / Render 자동 감지)
# ==============================================================================

# --- 1. 환경 변수 및 플랫폼 감지 ---
# 배포 플랫폼(Railway, Render) 감지
IS_RAILWAY_DEPLOY = 'RAILWAY_ENVIRONMENT' in os.environ
IS_RENDER_DEPLOY = os.environ.get('RENDER') == 'true'

# 두 플랫폼 중 하나라도 감지되면 운영(Production) 환경으로 설정
IS_PRODUCTION = IS_RAILWAY_DEPLOY or IS_RENDER_DEPLOY

# --- 2. 환경별 주요 설정 분기 ---
if IS_PRODUCTION:
    # --- 🏢 운영 환경 (Production) 공통 설정 ---
    print("✅ 운영 환경(Production) 설정을 시작합니다.")
    DEBUG = False

    # 허용할 호스트 목록
    # Render의 기본 URL을 직접 추가하여 안정성 확보
    ALLOWED_HOSTS = ['hearth-chat.onrender.com']
    
    # 플랫폼별 호스트네임 동적 추가
    if IS_RENDER_DEPLOY:
        RENDER_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
        if RENDER_HOSTNAME and RENDER_HOSTNAME not in ALLOWED_HOSTS:
            ALLOWED_HOSTS.append(RENDER_HOSTNAME)
            print(f"  - Render 환경 감지: {RENDER_HOSTNAME}")

    if IS_RAILWAY_DEPLOY:
        RAILWAY_HOSTNAME = "hearthchat-production.up.railway.app"
        if RAILWAY_HOSTNAME not in ALLOWED_HOSTS:
            ALLOWED_HOSTS.append(RAILWAY_HOSTNAME)
            print(f"  - Railway 환경 감지: {RAILWAY_HOSTNAME}")

    # URL 및 API 엔드포인트 설정
    BASE_URL = f"https://{ALLOWED_HOSTS[0]}" if ALLOWED_HOSTS else ""
    LILY_API_URL = "https://gbrabbit-lily-fast-api.hf.space"

    # 보안 관련 설정 (HTTPS 환경)
    SESSION_COOKIE_SAMESITE = "None"
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SAMESITE = "None"
    CSRF_COOKIE_SECURE = True
    
    # 신뢰할 수 있는 출처 (CORS, CSRF)
    # 위에서 추가된 호스트 주소들을 기반으로 자동 생성
    CSRF_TRUSTED_ORIGINS = [f'https://{host}' for host in ALLOWED_HOSTS]
    CORS_ALLOWED_ORIGINS = [f'https://{host}' for host in ALLOWED_HOSTS]
    
    # 허깅페이스 스페이스 URL 등 공통으로 필요한 주소 추가
    CSRF_TRUSTED_ORIGINS.append(LILY_API_URL)
    CORS_ALLOWED_ORIGINS.append(LILY_API_URL)
    
    print(f"  - BASE_URL: {BASE_URL}")
    print(f"  - ALLOWED_HOSTS: {ALLOWED_HOSTS}")
    print(f"  - CORS_ALLOWED_ORIGINS: {CORS_ALLOWED_ORIGINS}")

else:
    # --- 💻 로컬 개발 환경 (Local) 설정 ---
    print("✅ 로컬 개발 환경(Local) 설정을 시작합니다.")
    DEBUG = True

    # 허용할 호스트 목록
    ALLOWED_HOSTS = ["localhost", "127.0.0.1", "192.168.44.9"]

    # URL 및 API 엔드포인트 설정
    BASE_URL = "http://localhost:8000"
    LILY_API_URL = "http://localhost:8001" # 로컬에서 Lily API를 실행하는 경우

    # 보안 관련 설정 (HTTP 환경)
    SESSION_COOKIE_SAMESITE = "Lax"
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SAMESITE = "Lax"
    CSRF_COOKIE_SECURE = False
    
    # 신뢰할 수 있는 출처 (CORS, CSRF)
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",    # React 개발 서버
        "http://127.0.0.1:3000",
        "http://192.168.44.9:3000",
        LILY_API_URL,               # 로컬 Lily API        
    ]
    CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS[:] # CORS와 동일하게 설정

    print(f"  - BASE_URL: {BASE_URL}")
    print(f"  - ALLOWED_HOSTS: {ALLOWED_HOSTS}")
    print(f"  - CORS_ALLOWED_ORIGINS: {CORS_ALLOWED_ORIGINS}")


# --- 3. 공통 설정 (환경과 무관) ---
# 이 설정들은 운영/로컬 환경 모두에 동일하게 적용됩니다.
CSRF_COOKIE_NAME = "csrftoken"
CSRF_COOKIE_HTTPONLY = False  # JS에서 CSRF 토큰에 접근해야 할 경우
CSRF_HEADER_NAME = "HTTP_X_CSRFTOKEN"
CORS_ALLOW_CREDENTIALS = True

# 기타 보안 설정 (필요시 주석 해제)
# SECURE_SSL_REDIRECT = IS_PRODUCTION
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# SECURE_CONTENT_TYPE_NOSNIFF = True
# SECURE_BROWSER_XSS_FILTER = True
# X_FRAME_OPTIONS = 'DENY'

# ==============================================================================

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# MySQL 커스텀 백엔드 추가
import sys

# DATABASES 설정을 안전하게 구성
if dj_database_url:
    DATABASES = {
        "default": dj_database_url.config(
            conn_max_age=600, 
            ssl_require=False
        )
    }
else:
    # dj_database_url이 없을 때 기본 설정
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# Railway 환경에서 PostgreSQL SSL 설정 추가
if os.environ.get("RAILWAY_ENVIRONMENT") and DATABASES["default"].get("ENGINE", "").endswith("postgresql"):
    DATABASES["default"]["OPTIONS"] = {
        'sslmode': 'require'
    }
    print("Railway PostgreSQL SSL 설정 적용됨")
elif DATABASES["default"].get("ENGINE", "").endswith("postgresql"):
    # PostgreSQL이지만 Railway가 아닌 경우
    print("PostgreSQL 감지됨 (Railway 아님)")

# 로컬 MySQL 환경에서만 utf8mb4 옵션 적용 (PostgreSQL 등에서는 절대 실행되지 않도록 보장)
print("DATABASE ENGINE:", DATABASES["default"].get("ENGINE", "<None>"))

# PostgreSQL 환경에서는 MySQL 설정을 절대 적용하지 않음
if (
    DATABASES["default"].get("ENGINE", "") == "django.db.backends.mysql"
    and not os.environ.get("RAILWAY_ENVIRONMENT")
    and "postgresql" not in DATABASES["default"].get("ENGINE", "").lower()
    and DATABASES["default"].get("ENGINE", "") != "django.db.backends.postgresql"
):
    try:
        DATABASES["default"]["OPTIONS"] = {
            "charset": os.environ.get("LOCAL_MYSQL_CHARSET", "utf8mb4"),
            "init_command": os.environ.get(
                "LOCAL_MYSQL_INIT_COMMAND",
                # "SET character_set_connection=utf8mb4; SET collation_connection=utf8mb4_unicode_ci;"
            ),
        }        
    except Exception as e:
        print(f"MySQL 설정 오류 (무시됨): {e}")
else:
    print("MySQL 전용 옵션은 적용되지 않음 (PostgreSQL 또는 Railway 환경)")

if not DATABASES["default"].get("ENGINE"):
    raise Exception("DATABASE_URL 환경변수 또는 ENGINE 설정이 잘못되었습니다. Railway Variables에서 DATABASE_URL을 확인하세요.")

# Gemini API 키
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY", "")

# CORS
CORS_ALLOW_ALL_ORIGINS = False  # 운영 환경에서는 False가 안전
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    origin for origin in os.environ.get("CORS_ALLOWED_ORIGINS", "").split(",")
    if origin and "://" in origin
]
if not CORS_ALLOWED_ORIGINS:
    CORS_ALLOWED_ORIGINS = [
        "https://hearthchat-production.up.railway.app",
        "https://gbrabbit-lily-fast-api.hf.space",
        "http://localhost:3000",
        "http://localhost:8000",
        "http://localhost:8001",
        "http://127.0.0.1:3000",
        "http://127.0.0.1:8000",
        "http://127.0.0.1:8001",
        "http://192.168.44.9:3000",
        "http://192.168.44.9:8000",
        "http://192.168.44.9:8001",
    ]
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^http://192\.168\.[0-9]+\.[0-9]+(:[0-9]+)?$",  # 192.168.*.*:포트 전체 허용
]

# Railway 헬스체크를 위한 추가 설정
CORS_ALLOWED_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'chat',
    'channels',
    'corsheaders',
    # allauth 관련 앱
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.kakao',
    'allauth.socialaccount.providers.naver',
    'allauth.socialaccount.providers.github',
    # hearth_chat 앱 (SocialApp 자동 생성을 위해)
    'hearth_chat.apps.HearthChatConfig',
    'rest_framework',
]
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

SITE_ID = 2 # 소셜 로그인 설정을 위한 필수 설정 (1: railway, 2: 로컬)

# 로컬 환경에서 Site 객체가 없을 때를 대비한 동적 SITE_ID 설정
if not os.environ.get("RAILWAY_ENVIRONMENT"):
    # 로컬 환경에서는 SITE_ID = 2 사용
    SITE_ID = 2
    print(f"로컬 환경 - SITE_ID 설정: {SITE_ID}")
    
    try:
        from django.contrib.sites.models import Site
        # Site 객체가 있으면 그 ID를 사용, 없으면 2 사용
        site = Site.objects.first()
        if site:
            print(f"로컬 환경 - 기존 Site 발견: {site.domain}")
        else:
            print("로컬 환경 - Site 객체가 없음, SITE_ID=2 사용")
    except Exception as e:
        print(f"Site 객체 확인 중 오류 (무시됨): {e}")
    
    # 로컬 환경에서 Site 객체가 없을 때 Django Admin 접속을 위한 패치
    try:
        from django.contrib.sites.models import Site
        from django.contrib.sites.shortcuts import get_current_site
        
        # 기존 get_current_site 함수를 완전히 오버라이드
        def patched_get_current_site_local(request):
            try:
                # 기존 방식으로 시도
                return Site.objects.get_current(request)
            except ObjectDoesNotExist:
                # Site 객체가 없으면 자동으로 생성
                site, created = Site.objects.get_or_create(
                    id=2,
                    defaults={
                        'domain': BASE_URL.replace('http://', '').replace('https://', ''),
                        'name': 'localhost'
                    }
                )
                print(f"로컬 Site 객체 자동 생성: {site.domain}")
                return site
        
        # 패치 적용
        import django.contrib.sites.shortcuts
        django.contrib.sites.shortcuts.get_current_site = patched_get_current_site_local
        
        # Site.objects.get_current도 패치
        def patched_get_current_local(self, request=None):
            try:
                return self.get(pk=SITE_ID)
            except ObjectDoesNotExist:
                site, created = Site.objects.get_or_create(
                    id=SITE_ID,
                    defaults={
                        'domain': BASE_URL.replace('http://', '').replace('https://', ''),
                        'name': 'localhost'
                    }
                )
                print(f"로컬 Site.objects.get_current 패치 - Site 생성: {site.domain}")
                return site
        
        # Site manager의 get_current 메서드 패치
        from django.contrib.sites.models import SiteManager
        SiteManager.get_current = patched_get_current_local
        
        print("로컬 환경 - Site 객체 자동 생성 패치 완전 적용됨")
    except Exception as e:
        print(f"로컬 Site 패치 적용 중 오류 (무시됨): {e}")

# Railway 환경에서 Site 객체가 없을 때를 대비한 동적 SITE_ID 설정
if os.environ.get("RAILWAY_ENVIRONMENT"):
    # Railway 환경에서는 항상 SITE_ID = 1 사용
    SITE_ID = 1
    print(f"Railway 환경 - SITE_ID 강제 설정: {SITE_ID}")
    
    try:
        from django.contrib.sites.models import Site
        # Site 객체가 있으면 그 ID를 사용, 없으면 1 사용
        site = Site.objects.first()
        if site:
            print(f"Railway 환경 - 기존 Site 발견: {site.domain}")
        else:
            print("Railway 환경 - Site 객체가 없음, SITE_ID=1 사용")
    except Exception as e:
        print(f"Site 객체 확인 중 오류 (무시됨): {e}")
    
    # Site 객체가 없을 때 Django Admin 접속을 위한 패치
    try:
        from django.contrib.sites.models import Site
        from django.contrib.sites.shortcuts import get_current_site
        
        # 기존 get_current_site 함수를 완전히 오버라이드
        def patched_get_current_site(request):
            try:
                # 기존 방식으로 시도
                return Site.objects.get_current(request)
            except ObjectDoesNotExist:
                # Site 객체가 없으면 자동으로 생성
                site, created = Site.objects.get_or_create(
                    id=1,
                    defaults={
                        'domain': BASE_URL.replace('http://', '').replace('https://', ''),
                        'name': 'HearthChat Production'
                    }
                )
                print(f"Site 객체 자동 생성: {site.domain}")
                return site
        
        # 패치 적용
        import django.contrib.sites.shortcuts
        django.contrib.sites.shortcuts.get_current_site = patched_get_current_site
        
        # Site.objects.get_current도 패치
        def patched_get_current(self, request=None):
            try:
                return self.get(pk=SITE_ID)
            except ObjectDoesNotExist:
                site, created = Site.objects.get_or_create(
                    id=SITE_ID,
                    defaults={
                        'domain': BASE_URL.replace('http://', '').replace('https://', ''),
                        'name': 'HearthChat Production'
                    }
                )
                print(f"Site.objects.get_current 패치 - Site 생성: {site.domain}")
                return site
        
        # Site manager의 get_current 메서드 패치
        from django.contrib.sites.models import SiteManager
        SiteManager.get_current = patched_get_current
        
        print("Railway 환경 - Site 객체 자동 생성 패치 완전 적용됨")
    except Exception as e:
        print(f"Site 패치 적용 중 오류 (무시됨): {e}")
    
    # Django Admin 접속을 위한 추가 설정
    # allauth에서 Site 객체를 사용하지 않도록 임시 설정
    ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https'
    SOCIALACCOUNT_PROVIDERS = {
        'google': {
            'SCOPE': [
                'openid',
                'profile',
                'email',
            ],
            'AUTH_PARAMS': {
                'access_type': 'online',
            }
        },
    }

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

LOGIN_REDIRECT_URL = '/accounts/popup-close/'
LOGOUT_REDIRECT_URL = '/'
ACCOUNT_LOGOUT_ON_GET = True

# allauth 설정 (최신 버전 호환)
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_EMAIL_VERIFICATION = 'optional'  # 이메일 검증 선택사항 (권장)
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_QUERY_EMAIL = True

# 이메일 기반 인증 설정
ACCOUNT_UNIQUE_EMAIL = True

# 이메일 확인 관련 설정
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3  # 이메일 확인 링크 유효기간 (3일)
ACCOUNT_RATE_LIMITS = {
    'confirm_email': '1/m',  # 이메일 확인 재전송 제한 (1분에 1회)
}

# allauth 소셜 로그인 provider별 설정 (구글 scope 오류 방지)
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'openid',
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
}

ASGI_APPLICATION = 'hearth_chat.asgi.application'

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # allauth 미들웨어 추가
    # render 정적 파일 문제 해결
    "whitenoise.middleware.WhiteNoiseMiddleware", 
]

ROOT_URLCONF = "hearth_chat.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "hearth_chat.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# 운영/로컬에 따라 React 빌드 파일 경로 설정
if IS_PRODUCTION:
    # Docker 컨테이너 내부 경로
    STATICFILES_DIRS = [
        '/app/hearth_chat_react/build',
    ]
else:
    # 로컬 개발 환경 경로
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, '..', 'hearth_chat_react', 'build'),
    ]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 미디어 파일(업로드 이미지 등) 설정
# MEDIA_ROOT = os.path.join(BASE_DIR, '..', 'hearth_chat_media')
MEDIA_ROOT = os.path.abspath(os.path.join(BASE_DIR, '..', 'hearth_chat_media'))
# MEDIA_ROOT = os.path.abspath(MEDIA_ROOT)  # 절대경로로 변환 (권장)
MEDIA_URL = '/media/'

# 로깅 설정 추가
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'allauth': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'allauth.account': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'allauth.socialaccount': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'allauth.socialaccount.providers.google': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'allauth.socialaccount.providers.oauth2': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'allauth.socialaccount.providers.oauth2.client': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Railway 환경에서 SocialApp 자동 생성
# if os.environ.get("RAILWAY_ENVIRONMENT"):
#     try:
#         from django.apps import apps
#         if apps.is_installed('allauth.socialaccount'):
#             from allauth.socialaccount.models import SocialApp
#             from allauth.socialaccount.providers.google.provider import GoogleProvider
#             from django.contrib.sites.models import Site
#             
#             # Site가 존재하는지 확인
#             try:
#                 site = Site.objects.get_current()
#                 
#                 # Google SocialApp이 존재하는지 확인하고 없으면 생성
#                 google_app, created = SocialApp.objects.get_or_create(
#                     provider=GoogleProvider.id,
#                     name='Google',
#                     defaults={
#                         'client_id': os.getenv('GOOGLE_CLIENT_ID', ''),
#                         'secret': os.getenv('GOOGLE_CLIENT_SECRET', ''),
#                     }
#                 )
#                 
#                 if created:
#                     # Site를 SocialApp에 연결
#                     google_app.sites.add(site)
#                     print(f"SocialApp 자동 생성 완료: {google_app.name} for {site.domain}")
#                 else:
#                     # 기존 앱 업데이트
#                     google_app.client_id = os.getenv('GOOGLE_CLIENT_ID', google_app.client_id)
#                     google_app.secret = os.getenv('GOOGLE_CLIENT_SECRET', google_app.secret)
#                     google_app.save()
#                     
#                     # Site 연결 확인
#                     if site not in google_app.sites.all():
#                         google_app.sites.add(site)
#                     
#                     print(f"SocialApp 업데이트 완료: {google_app.name} for {site.domain}")
#                     
#             except Exception as e:
#                 print(f"SocialApp 자동 생성 중 오류 (무시됨): {e}")
#     except Exception as e:
#         print(f"SocialApp 설정 중 오류 (무시됨): {e}")

# 이메일 검증 설정 (중복 제거 - 위에서 이미 설정됨)
# ACCOUNT_EMAIL_VERIFICATION = 'optional'  # 이메일 검증 선택사항 (권장)
# ACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # 이메일 검증 강제 (나중에 필요시 주석 해제)

# 이메일 발송 설정 (Railway 환경)
if os.environ.get("RAILWAY_ENVIRONMENT"):
    # Railway에서 이메일 발송을 위한 설정
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'smtp.gmail.com'  # Gmail SMTP 사용
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')  # Gmail 계정
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')  # Gmail 앱 비밀번호
    DEFAULT_FROM_EMAIL = os.getenv('EMAIL_HOST_USER', 'noreply@hearthchat.com')
else:
    # 개발 환경에서는 콘솔에 출력
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

SOCIALACCOUNT_ADAPTER = 'hearth_chat.adapters.CustomSocialAccountAdapter'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 20,
}

# redis 설정 (운영/배포/로컬 모두 환경변수 REDIS_URL 기반)
# 실서비스(운영/배포)에서는 반드시 channels_redis.core.RedisChannelLayer만 사용
# (메모리 채널(InMemoryChannelLayer)은 실시간 채팅, 알림 등에서 서버가 여러 대일 때 절대 동작하지 않음)
REDIS_URL = os.environ.get("REDIS_URL", "redis://localhost:6379")
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [REDIS_URL],
        },
    },
}

# print("REDIS_URL:", REDIS_URL)

# WhiteNoise를 위한 정적 파일 스토리지 설정 (운영 환경에서만)
if IS_PRODUCTION:
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
