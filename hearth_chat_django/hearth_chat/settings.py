"""
Django settings for hearth_chat project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url
import sys

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# MySQL 커스텀 백엔드를 위한 sys.path 추가
import sys
sys.path.append(os.path.join(BASE_DIR, 'chat'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", "your-default-secret-key")
DEBUG = os.environ.get("DEBUG", "False") == "True"

# Railway 배포 시 디버깅을 위해 임시로 DEBUG 활성화
if os.environ.get("RAILWAY_ENVIRONMENT"):
    DEBUG = True
    print("Railway environment detected - DEBUG mode enabled")

# ALLOWED_HOSTS 설정 개선
ALLOWED_HOSTS = [
    "*",  # 개발/테스트용 전체 허용
    "localhost",
    "127.0.0.1",
    "[::1]",
    "192.168.44.9",
    "192.168.0.0/16",  # 192.168.*.* 전체 허용
]
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000',
    'http://localhost:3000',
    'http://127.0.0.1:8000',
    'http://127.0.0.1:3000',    
    'http://192.168.44.9:8000',
    'http://192.168.44.9:3000',    
]


# Railway 환경에서 추가 설정
if os.environ.get("RAILWAY_ENVIRONMENT"):
    # 헬스체크를 위한 추가 설정
    SECURE_SSL_REDIRECT = False
    SECURE_PROXY_SSL_HEADER = None
    print("Railway environment - SSL settings configured")
    
    # Railway 환경에서 CORS 완전 해제
    CORS_ALLOW_ALL_ORIGINS = True
    print("Railway environment - CORS_ALLOW_ALL_ORIGINS enabled")
    
    # Railway 환경에서 모든 요청 허용
    SECURE_CONTENT_TYPE_NOSNIFF = False
    SECURE_BROWSER_XSS_FILTER = False
    X_FRAME_OPTIONS = 'ALLOWALL'
    print("Railway environment - Security headers relaxed")

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# MySQL 커스텀 백엔드 추가
import sys

DATABASES = {
    "default": dj_database_url.config(conn_max_age=600, ssl_require=False)
}

# 로컬 MySQL 환경에서만 utf8mb4 옵션 적용 (PostgreSQL 등에서는 절대 실행되지 않도록 보장)
print("DATABASE ENGINE:", DATABASES["default"].get("ENGINE", "<None>"))

if (
    DATABASES["default"].get("ENGINE", "") == "django.db.backends.mysql"
    and not os.environ.get("RAILWAY_ENVIRONMENT")
):
    DATABASES["default"]["OPTIONS"] = {
        "charset": os.environ.get("LOCAL_MYSQL_CHARSET", "utf8mb4"),
        "init_command": os.environ.get(
            "LOCAL_MYSQL_INIT_COMMAND",
            "SET character_set_connection=utf8mb4; SET collation_connection=utf8mb4_unicode_ci;"
        ),
    }
    print("로컬 MySQL utf8mb4 옵션 적용 완료!")
else:
    print("MySQL 전용 옵션은 적용되지 않음")

if not DATABASES["default"].get("ENGINE"):
    raise Exception("DATABASE_URL 환경변수 또는 ENGINE 설정이 잘못되었습니다. Railway Variables에서 DATABASE_URL을 확인하세요.")

# Gemini API 키
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY", "")

# CORS
CORS_ALLOW_ALL_ORIGINS = False  # 운영 환경에서는 False가 안전
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    origin for origin in os.environ.get("CORS_ALLOWED_ORIGINS", "").split(",")
    if origin and "://" in origin
]
if not CORS_ALLOWED_ORIGINS:
    CORS_ALLOWED_ORIGINS = [
        "https://hearthchat-production.up.railway.app",
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://192.168.44.9:3000",
        "http://192.168.44.9:8000",
    ]
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^http://192\.168\.[0-9]+\.[0-9]+(:[0-9]+)?$",  # 192.168.*.*:포트 전체 허용
]

# Railway 헬스체크를 위한 추가 설정
CORS_ALLOWED_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'chat',
    'channels',
    'corsheaders',
    # allauth 관련 앱
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.kakao',
    'allauth.socialaccount.providers.naver',
    'allauth.socialaccount.providers.github',
]

SITE_ID = 2 # 소셜 로그인 설정을 위한 필수 설정 (1: railway, 2: 로컬)

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'optional'
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_QUERY_EMAIL = True

# allauth 소셜 로그인 provider별 설정 (구글 scope 오류 방지)
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
}

ASGI_APPLICATION = 'hearth_chat.asgi.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    },
}


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # allauth 미들웨어 추가
]

ROOT_URLCONF = "hearth_chat.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "hearth_chat.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# 추가 static 파일 디렉토리
if os.environ.get("RAILWAY_ENVIRONMENT"):
    STATICFILES_DIRS = [
        '/app/hearth_chat_react/build/static',
        '/app/hearth_chat_react/build',  # 루트 파일 포함!
    ]
else:
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, '..', 'hearth_chat_react', 'build', 'static'),
        os.path.join(BASE_DIR, '..', 'hearth_chat_react', 'build'),  # 루트 파일 포함!
    ]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 미디어 파일(업로드 이미지 등) 설정
MEDIA_ROOT = os.path.join(BASE_DIR, '..', 'hearth_chat_media')
# MEDIA_ROOT = os.path.abspath(MEDIA_ROOT)  # 절대경로로 변환 (권장)
MEDIA_URL = '/media/'

# 로깅 설정 추가
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
